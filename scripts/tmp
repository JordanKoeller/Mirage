#!/bin/bash
export PYTHONPATH="/data/BigData/students/jkoeller/Mirage2"
export PYTHONSTARTUP="/data/BigData/students/jkoeller/Mirage2/scripts/shell.py"
export JAR_LOC="/data/BigData/students/jkoeller/Mirage2/spark_mirage/target/scala-2.11/spark_mirage-assembly-beta.jar"
#!/bin/bash
#Function for pulling out spark configs. By default, we source the original parameters file.
#If any are overwritten here, then we need to pull out the new version and assign it here.
#Usage: extract_arg KWRD DEFAULT_VALUE
cmds=( "$@" )
source "$PYTHONPATH/scripts/cluster_config"
function extract_arg() {
	for ((idx=0; idx<${#cmds[@]}; ++idx)); do
		if [ "${cmds[idx]}" = "$1" ]
		then
			cind=$(expr $idx + 1)
			echo "${cmds[cind]}"
			exit
		fi
	done
	echo "$2"
}
#Simply check if a flag was passed. Returns "true" if true, else "false"
function extract_flag() {
	for cmd in $cmds
	do
		if [ "$cmd" = "$1" ]
		then
			echo "true"
			exit
		fi
	done
	echo "false"
}


MASTER="$(extract_arg "--master" "$MASTER")"
EXECUTOR_MEMORY="$(extract_arg "--executor-memory" "$EXECUTOR_MEMORY")"
DRIVER_MEMORY="$(extract_arg "--driver-memory" "$DRIVER_MEMORY")"
EXTRA_ARGS="$(extract_arg "--extra-spark-opts" "$EXTRA_ARGS")"
NUM_EXEC="$(extract_arg "--num-executors" "$NUM_EXEC")"
if [ "$(extract_flag "--no-gui")" = "true" ] || [ "$(extract_flag "-n")" = "true" ]
then
	export LA_WITH_GUI="no"
else
	export LA_WITH_GUI="yes"
fi

if [ "$(extract_flag "--run")" = "true" ]
then
	export LA_WITH_GUI="no"
	export PYSPARK_DRIVER_PYTHON=python
	export LA_EXIT_ON_COMPLETE="TRUE"
	export LA_INFILE="${cmds[$(expr $# - 2)]}"
	export LA_OUTFILE="${cmds[$(expr $# - 1)]}"
	main_loc="$PYTHONPATH/main.py"
	echo $INFILE
	echo $OUTFILE
	cmd="spark-submit --jars "$JAR_LOC" --conf spark.driver.maxResultSize="0" --master $MASTER --num-executors $NUM_EXEC --executor-memory $EXECUTOR_MEMORY --driver-memory $DRIVER_MEMORY "$EXTRA_ARGS" "$main_loc" --run "$LA_INFILE" --outfile "$LA_OUTFILE""
        echo "$cmd"
	$cmd
	exit

elif [ "$(extract_flag "--local")" = "true" ] || [ "$(extract_flag "-l")" = "true" ]
then
	MASTER="local[*]"
	export LA_IS_SIMULATION="true"
	pyspark --master $MASTER --jars $JAR_LOC

elif [ "$(extract_flag "--cluster")" = "true" ] || [ "$(extract_flag "-c")" = "true" ]
then
	command="pyspark --jars "$JAR_LOC" --conf spark.driver.maxResultSize="0" --master $MASTER --executor-memory $EXECUTOR_MEMORY --driver-memory $DRIVER_MEMORY "$EXTRA_ARGS""
	export LA_IS_SIMULATION="true"
	echo "$command"
	$command
else
	ipython
fi

